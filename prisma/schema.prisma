generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique @db.VarChar(100)
  description  String?
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  deleted_at   DateTime?      @db.Timestamptz(6)
  transactions transactions[]
}

model payment_methods {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String         @db.Uuid
  name         String         @db.VarChar(100)
  description  String?
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  deleted_at   DateTime?      @db.Timestamptz(6)
  users        users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions transactions[]

  @@unique([user_id, name])
}

model roles {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @unique @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  users      users[]
}

model transaction_status {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique @db.VarChar(50)
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  deleted_at   DateTime?      @db.Timestamptz(6)
  transactions transactions[]
}

model transaction_types {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique @db.VarChar(50)
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  deleted_at   DateTime?      @db.Timestamptz(6)
  transactions transactions[]
}

model transactions {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String             @db.Uuid
  type_id            String             @db.Uuid
  status_id          String             @db.Uuid
  category_id        String             @db.Uuid
  payment_method_id  String             @db.Uuid
  amount             Int
  description        String?
  transaction_date   String
  created_at         DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?          @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime?          @db.Timestamptz(6)
  categories         categories         @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment_methods    payment_methods    @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transaction_status transaction_status @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transaction_types  transaction_types  @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              users              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  password_hash   String            @db.VarChar(255)
  first_name      String            @db.VarChar(100)
  last_name       String            @db.VarChar(100)
  avatar_url      String?           @db.VarChar(255)
  role_id         String            @db.Uuid
  is_active       Boolean?          @default(true)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  last_login_at   DateTime?         @db.Timestamptz(6)
  deleted_at      DateTime?         @db.Timestamptz(6)
  payment_methods payment_methods[]
  transactions    transactions[]
  roles           roles             @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
